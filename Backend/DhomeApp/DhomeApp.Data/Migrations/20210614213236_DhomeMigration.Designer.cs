// <auto-generated />
using DhomeApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DhomeApp.Data.Migrations
{
    [DbContext(typeof(DbContextDhomeApp))]
    [Migration("20210614213236_DhomeMigration")]
    partial class DhomeMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DhomeApp.Entity.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("AppointmentDate")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("appointmentDate");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("status");

                    b.Property<int>("Valorization")
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("valorization");

                    b.HasKey("AppointmentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("appointment");
                });

            modelBuilder.Entity("DhomeApp.Entity.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("CityName");

                    b.HasKey("CityId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("DhomeApp.Entity.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cellphone")
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("Cellphone");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("Dni");

                    b.Property<string>("Email")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Lastname");

                    b.HasKey("CustomerId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("DhomeApp.Entity.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("DistrictName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("DistrictName");

                    b.HasKey("DistrictId");

                    b.HasIndex("CityId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("DhomeApp.Entity.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cellphone")
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("Cellphone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("Dni");

                    b.Property<string>("Email")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Lastname");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DhomeApp.Entity.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentMethodName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PaymentMethodName");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("DhomeApp.Entity.Specialty", b =>
                {
                    b.Property<int>("SpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SpecialtyName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("SpecialtyName");

                    b.HasKey("SpecialtyId");

                    b.ToTable("Specialty");
                });

            modelBuilder.Entity("DhomeApp.Entity.Appointment", b =>
                {
                    b.HasOne("DhomeApp.Entity.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_appointment_customer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DhomeApp.Entity.Employee", "Employee")
                        .WithMany("Appointments")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_appointment_employee")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DhomeApp.Entity.PaymentMethod", "PaymentMethod")
                        .WithMany("Appointments")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("fk_appointment_paymentMethod")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("DhomeApp.Entity.Customer", b =>
                {
                    b.HasOne("DhomeApp.Entity.District", "District")
                        .WithMany("Customers")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_customer_district")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("DhomeApp.Entity.District", b =>
                {
                    b.HasOne("DhomeApp.Entity.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_district_city")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DhomeApp.Entity.Employee", b =>
                {
                    b.HasOne("DhomeApp.Entity.District", "District")
                        .WithMany("Employees")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_employee_district")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DhomeApp.Entity.Specialty", "Specialty")
                        .WithMany("Employees")
                        .HasForeignKey("SpecialtyId")
                        .HasConstraintName("fk_employee_specialty")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("DhomeApp.Entity.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("DhomeApp.Entity.Customer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("DhomeApp.Entity.District", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DhomeApp.Entity.Employee", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("DhomeApp.Entity.PaymentMethod", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("DhomeApp.Entity.Specialty", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
